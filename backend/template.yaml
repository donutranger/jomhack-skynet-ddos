AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  risk_engine

  Sample SAM Template for lambda-python3.11

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 180
  Api:
    BinaryMediaTypes:
      - "*/*"

Resources:
  UploadBusinessOverview:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.upload_business_overview
      Runtime: python3.11
      Architectures:
        - x86_64
      Policies:
        - S3CrudPolicy:
            BucketName: 'canyouhackit'
      Environment:
        Variables:
          BUCKET_NAME: 'canyouhackit'
          # QUEUE_URL: !GetAtt ProcessBusinessOverviewQueue.Arn
      Events:
        UploadEvent:
          Type: Api
          Properties:
            Path: /business-overview
            Method: post
  ProcessBusinessOverview:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.process_business_overview
      Runtime: python3.11
      Architectures:
        - x86_64
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt MyDeadLetterQueue.Arn
  BusinessOverviewStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: UploadBusinessOverview
        States:
          UploadBusinessOverview:
            Type: Task
            Resource: !GetAtt UploadBusinessOverview.Arn
            Next: ProcessBusinessOverview
          ProcessBusinessOverview:
            Type: Task
            Resource: !GetAtt ProcessBusinessOverview.Arn
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 5
                BackoffRate: 2.0
            End: true
      Role: !GetAtt StateExecutionRole.Arn
  MyDeadLetterQueue:
    Type: AWS::SQS::Queue
  StateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: StateExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt UploadBusinessOverview.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ProcessBusinessOverview.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt MyDeadLetterQueue.Arn

  

          

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RiskEngineApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  UploadBusinessOverview:
    Description: "UploadBusinessOverview Lambda Function ARN"
    Value: !GetAtt UploadBusinessOverview.Arn
 
